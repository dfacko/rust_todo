use crate::diesel::prelude::*;
use crate::schema::*;
use serde::{Deserialize, Serialize};
use std::io;

#[derive(Debug, Queryable, Serialize, Deserialize)]
pub struct TodoList {
    pub id: i32,
    pub title: String,
}

#[derive(Debug, Insertable)]
#[table_name = "todo_list"]
pub struct TodoListNew<'a> {
    pub title: &'a str,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct TodoListJson {
    pub title: String,
}

impl TodoList {
    pub async fn get_all_lists(conn: &PgConnection) -> Result<Vec<TodoList>, io::Error> {
        use crate::schema::todo_list::dsl::*;
        Ok(todo_list
            .load::<TodoList>(conn)
            .expect("Could not load lists"))
    }

    pub async fn create_list(
        conn: &PgConnection,
        title: &str,
    ) -> Result<TodoList, diesel::result::Error> {
        //use crate::schema::todo_list;
        let new_list = TodoListNew { title: title };

        diesel::insert_into(todo_list::table)
            .values(&new_list)
            .get_result(conn)
    }

    pub async fn delete_list(conn: &PgConnection, delete_id: i32) -> String {
        use crate::schema::todo_list::dsl::*;
        match diesel::delete(todo_list.filter(id.eq(delete_id))).execute(conn) {
            Ok(_) => String::from("sucesfully deleted"),
            Err(_) => String::from("failed to delete"),
        }
    }
}
